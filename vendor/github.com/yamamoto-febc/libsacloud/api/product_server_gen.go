package api

/************************************************
  generated by IDE. for [ProductServerAPI]
************************************************/

import (
	"github.com/yamamoto-febc/libsacloud/sacloud"
)

/************************************************
   To support influent interface for Find()
************************************************/

func (api *ProductServerAPI) Reset() *ProductServerAPI {
	api.reset()
	return api
}

func (api *ProductServerAPI) Offset(offset int) *ProductServerAPI {
	api.offset(offset)
	return api
}

func (api *ProductServerAPI) Limit(limit int) *ProductServerAPI {
	api.limit(limit)
	return api
}

func (api *ProductServerAPI) Include(key string) *ProductServerAPI {
	api.include(key)
	return api
}

func (api *ProductServerAPI) Exclude(key string) *ProductServerAPI {
	api.exclude(key)
	return api
}

func (api *ProductServerAPI) FilterBy(key string, value interface{}) *ProductServerAPI {
	api.filterBy(key, value, false)
	return api
}

// func (api *ProductServerAPI) FilterMultiBy(key string, value interface{}) *ProductServerAPI {
// 	api.filterBy(key, value, true)
// 	return api
// }

func (api *ProductServerAPI) WithNameLike(name string) *ProductServerAPI {
	return api.FilterBy("Name", name)
}

func (api *ProductServerAPI) WithTag(tag string) *ProductServerAPI {
	return api.FilterBy("Tags.Name", tag)
}
func (api *ProductServerAPI) WithTags(tags []string) *ProductServerAPI {
	return api.FilterBy("Tags.Name", tags)
}

// func (api *ProductServerAPI) WithSizeGib(size int) *ProductServerAPI {
// 	api.FilterBy("SizeMB", size*1024)
// 	return api
// }

// func (api *ProductServerAPI) WithSharedScope() *ProductServerAPI {
// 	api.FilterBy("Scope", "shared")
// 	return api
// }

// func (api *ProductServerAPI) WithUserScope() *ProductServerAPI {
// 	api.FilterBy("Scope", "user")
// 	return api
// }

func (api *ProductServerAPI) SortBy(key string, reverse bool) *ProductServerAPI {
	api.sortBy(key, reverse)
	return api
}

func (api *ProductServerAPI) SortByName(reverse bool) *ProductServerAPI {
	api.sortByName(reverse)
	return api
}

// func (api *ProductServerAPI) SortBySize(reverse bool) *ProductServerAPI {
// 	api.sortBy("SizeMB", reverse)
// 	return api
// }

/************************************************
  To support CRUD(Create/Read/Update/Delete)
************************************************/

//func (api *ProductServerAPI) New() *sacloud.ProductServer {
//	return &sacloud.ProductServer{}
//}

// func (api *ProductServerAPI) Create(value *sacloud.ProductServer) (*sacloud.ProductServer, error) {
// 	return api.request(func(res *sacloud.Response) error {
// 		return api.create(api.createRequest(value), res)
// 	})
// }

func (api *ProductServerAPI) Read(id string) (*sacloud.ProductServer, error) {
	return api.request(func(res *sacloud.Response) error {
		return api.read(id, nil, res)
	})
}

// func (api *ProductServerAPI) Update(id string, value *sacloud.ProductServer) (*sacloud.ProductServer, error) {
// 	return api.request(func(res *sacloud.Response) error {
// 		return api.update(id, api.createRequest(value), res)
// 	})
// }

// func (api *ProductServerAPI) Delete(id string) (*sacloud.ProductServer, error) {
// 	return api.request(func(res *sacloud.Response) error {
// 		return api.delete(id, nil, res)
// 	})
// }

/************************************************
  Inner functions
************************************************/

func (api *ProductServerAPI) setStateValue(setFunc func(*sacloud.Request)) *ProductServerAPI {
	api.baseAPI.setStateValue(setFunc)
	return api
}

func (api *ProductServerAPI) request(f func(*sacloud.Response) error) (*sacloud.ProductServer, error) {
	res := &sacloud.Response{}
	err := f(res)
	if err != nil {
		return nil, err
	}
	return res.ServerPlan, nil
}

func (api *ProductServerAPI) createRequest(value *sacloud.ProductServer) *sacloud.Request {
	req := &sacloud.Request{}
	req.ServerPlan = value
	return req
}
