package api

/************************************************
  generated by IDE. for [ArchiveAPI]
************************************************/

import (
	"github.com/yamamoto-febc/libsacloud/sacloud"
)

/************************************************
   To support influent interface for Find()
************************************************/

func (api *ArchiveAPI) Reset() *ArchiveAPI {
	api.reset()
	return api
}

func (api *ArchiveAPI) Offset(offset int) *ArchiveAPI {
	api.offset(offset)
	return api
}

func (api *ArchiveAPI) Limit(limit int) *ArchiveAPI {
	api.limit(limit)
	return api
}

func (api *ArchiveAPI) Include(key string) *ArchiveAPI {
	api.include(key)
	return api
}

func (api *ArchiveAPI) Exclude(key string) *ArchiveAPI {
	api.exclude(key)
	return api
}

func (api *ArchiveAPI) FilterBy(key string, value interface{}) *ArchiveAPI {
	api.filterBy(key, value, false)
	return api
}

// func (api *ArchiveAPI) FilterMultiBy(key string, value interface{}) *ArchiveAPI {
// 	api.filterBy(key, value, true)
// 	return api
// }

func (api *ArchiveAPI) WithNameLike(name string) *ArchiveAPI {
	return api.FilterBy("Name", name)
}

func (api *ArchiveAPI) WithTag(tag string) *ArchiveAPI {
	return api.FilterBy("Tags.Name", tag)
}
func (api *ArchiveAPI) WithTags(tags []string) *ArchiveAPI {
	return api.FilterBy("Tags.Name", tags)
}

func (api *ArchiveAPI) WithSizeGib(size int) *ArchiveAPI {
	api.FilterBy("SizeMB", size*1024)
	return api
}

func (api *ArchiveAPI) WithSharedScope() *ArchiveAPI {
	api.FilterBy("Scope", "shared")
	return api
}

func (api *ArchiveAPI) WithUserScope() *ArchiveAPI {
	api.FilterBy("Scope", "user")
	return api
}

func (api *ArchiveAPI) SortBy(key string, reverse bool) *ArchiveAPI {
	api.sortBy(key, reverse)
	return api
}

func (api *ArchiveAPI) SortByName(reverse bool) *ArchiveAPI {
	api.sortByName(reverse)
	return api
}

func (api *ArchiveAPI) SortBySize(reverse bool) *ArchiveAPI {
	api.sortBy("SizeMB", reverse)
	return api
}

/************************************************
  To support CRUD(Create/Read/Update/Delete)
************************************************/

func (api *ArchiveAPI) Create(value *sacloud.Archive) (*sacloud.Archive, error) {
	return api.request(func(res *sacloud.Response) error {
		return api.create(api.createRequest(value), res)
	})
}

func (api *ArchiveAPI) Read(id string) (*sacloud.Archive, error) {
	return api.request(func(res *sacloud.Response) error {
		return api.read(id, nil, res)
	})
}

func (api *ArchiveAPI) Update(id string, value *sacloud.Archive) (*sacloud.Archive, error) {
	return api.request(func(res *sacloud.Response) error {
		return api.update(id, api.createRequest(value), res)
	})
}

func (api *ArchiveAPI) Delete(id string) (*sacloud.Archive, error) {
	return api.request(func(res *sacloud.Response) error {
		return api.delete(id, nil, res)
	})
}

func (api *ArchiveAPI) New() *sacloud.Archive {
	return &sacloud.Archive{}
}

/************************************************
  Inner functions
************************************************/

func (api *ArchiveAPI) setStateValue(setFunc func(*sacloud.Request)) *ArchiveAPI {
	api.baseAPI.setStateValue(setFunc)
	return api
}

func (api *ArchiveAPI) request(f func(*sacloud.Response) error) (*sacloud.Archive, error) {
	res := &sacloud.Response{}
	err := f(res)
	if err != nil {
		return nil, err
	}
	return res.Archive, nil
}

func (api *ArchiveAPI) createRequest(value *sacloud.Archive) *sacloud.Request {
	req := &sacloud.Request{}
	req.Archive = value
	return req
}
